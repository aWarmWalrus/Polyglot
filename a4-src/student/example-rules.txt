0 - 1 = 1 --> eat;

mem[5]=1 --> mem[6] := mem[4]
             mem[5] := 2;

mem[6] mod 1000 < 6 --> mem[5]:=1
                        eat;

mem[mem[3] + 10] mod 6 <= 3 --> right;

mem[8] mod 6 >= 3 --> left;

ahead[1] = 0 --> forward;

{ahead[1] != 1 and
 ahead[1] != 2} and
ahead[1] != 0-1 --> attack;

ahead[1] > 0 --> tag[1];

mem[4] > mem[3] * 100 and
mem[3] < (10 + mem[7])
    --> grow;

mem[4] > 1000 --> mem[7] := mem[7] + mem[5]
                  bud;

mem[5+3-10] = 20 --> mem[mem[2]] := 5 + 3 + random[9] * 5 + 38 - 938 + (69 / 94)
					 mem[3] := 12
					 mem[7] := ahead[2];

3 * (3 - ahead[6 + 3]) <= 5 mod 6 --> attack;

4 < 3 and {{6 != 3 or 3 + 3 < 3}} --> mem[6] := 0;
{{(3-3) = 30 or 4 < 2} and 3 = 3} --> attack attack;
